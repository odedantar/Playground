{"version":3,"sources":["components/coordinatesForm.jsx","components/googleChart.jsx","functions/api/requests.js","functions/dataPasers.js","components/weatherPanel.jsx","App.js","serviceWorker.js","index.js"],"names":["CoordinatesForm","state","longitude","latitude","change","e","_this","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","props","_this2","this","react_default","a","createElement","type","placeholder","onChange","onClick","Component","GoogleChart","index_esm","chartType","width","height","data","options","jsonHeaders","Accept","Accept-Charset","User-Agent","apikey","historicalTemplate","url","method","json","geocode","lon","lat","location_id","start_time","end_time","timestep","fields","units","historicalRequest","start","end","steps","callback","body","reqData","headers","request","err","res","statusCode","jsonRequest","rawToChart","rawData","chartData","forEach","element","newData","observation_time","temp","wind_speed","humidity","push","WeatherPanel","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","chartWidth","chartHeight","chartOptions","title","curveType","legend","position","parseFloat","bind","assertThisInitialized","googleChart","coordinatesForm","App","weatherPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cea1aeba.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass CoordinatesForm extends Component {\r\n    state = { \r\n        longitude: -71.301998792,\r\n        latitude: 44.268832258\r\n     };\r\n\r\n     change = e => {\r\n         this.setState({\r\n             [e.target.name]: e.target.value\r\n         });\r\n     };\r\n\r\n     onSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n     };\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <h3>Coordiantes</h3>\r\n                <form>\r\n                    <input \r\n                        name=\"longitude\" \r\n                        type=\"number\"\r\n                        placeholder=\"Longitude\"\r\n                        value={this.state.longitude}\r\n                        onChange={e => this.change(e)}\r\n                    />\r\n                    <br/>\r\n                    <input \r\n                        name=\"latitude\" \r\n                        type=\"number\"\r\n                        placeholder=\"Latitude\"\r\n                        value={this.state.latitude}\r\n                        onChange={e => this.change(e)}\r\n                    />\r\n                    <br/>\r\n                    <button onClick={e => this.onSubmit(e)}>Submit</button>\r\n                </form>\r\n            </div>\r\n         );\r\n    };\r\n};\r\n \r\nexport default CoordinatesForm;","import React, { Component } from 'react';\r\nimport { Chart } from 'react-google-charts';\r\n\r\n\r\nclass GoogleChart extends Component {\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <Chart\r\n                    chartType={this.props.type}\r\n                    width={this.props.width}\r\n                    height={this.props.height}\r\n                    data={this.props.data}\r\n                    options={this.props.options}\r\n                />\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default GoogleChart;","import request from 'request'\r\n\r\nconst jsonHeaders = {\r\n    'Accept': 'application/json',\r\n    'Accept-Charset': 'utf-8',\r\n    'User-Agent': 'my-reddit-client',\r\n    // Key for the ClimaCell API\r\n    'apikey': 'S984VQLZqIKmB7bCS6YFaV9sRUBAtYY7'\r\n};\r\n\r\nconst historicalTemplate ={\r\n    url: 'http://api2.climacell.co/v2/historical',\r\n    method: 'POST',\r\n    json: {\r\n        geocode: {\r\n          lon: -71.301998792,\r\n          lat: 44.268832258\r\n        },\r\n        location_id: \"\",\r\n        start_time: \"2018-03-19T10:00:00Z\",\r\n        end_time: \"2018-03-19T11:00:00Z\",\r\n        timestep: 60,\r\n        fields: [\r\n          {\r\n            name: \"temp\",\r\n            units: \"F\"\r\n          },\r\n          {\r\n            name: \"wind_speed\",\r\n            units: \"knots\"\r\n          },\r\n          {\r\n            name: \"humidity\",\r\n            units: \"%\"\r\n          }\r\n        ]\r\n      }\r\n};\r\n\r\n\r\nconst jsonRequest = (url, method, body, callback) => {\r\n    \r\n    let reqData = {\r\n        url: url,\r\n        method: method,\r\n        headers: jsonHeaders,\r\n        json: body\r\n    };\r\n\r\n    request(reqData, \r\n        (err, res, body) => {\r\n        if (err || res.statusCode !== 200) {\r\n            return callback(err || {statusCode: res.statusCode});\r\n        };\r\n        callback(null, body);\r\n    });\r\n\r\n};\r\n\r\nconst historicalRequest = (longitude, latitude, start, end, steps, callback) => {\r\n    \r\n    historicalTemplate.json.geocode.lon = longitude;\r\n    historicalTemplate.json.geocode.lat = latitude;\r\n    historicalTemplate.json.start_time = start;\r\n    historicalTemplate.json.end_time = end;\r\n    historicalTemplate.json.timestep = steps;\r\n\r\n    jsonRequest(\r\n        historicalTemplate.url, \r\n        historicalTemplate.method, \r\n        historicalTemplate.json, \r\n        callback\r\n    );\r\n\r\n};\r\n\r\nexport { jsonRequest };\r\nexport { historicalRequest };","const rawToChart = (rawData) => {\r\n\r\n    let chartData = [['Time', 'Temperature', 'Wind Speed', 'Humidity']]\r\n    rawData.forEach(element => {\r\n        let newData = [\r\n            element.observation_time.value,\r\n            element.temp.value,\r\n            element.wind_speed.value,\r\n            element.humidity.value\r\n        ]\r\n        chartData.push(newData);\r\n    });\r\n\r\n    return chartData;\r\n\r\n};\r\n\r\nexport {rawToChart};","import React, { Component } from 'react';\r\nimport CoordinatesForm from './coordinatesForm'\r\nimport GoogleChart from './googleChart'\r\nimport { historicalRequest } from '../functions/api/requests.js'\r\nimport { rawToChart } from '../functions/dataPasers.js'\r\n\r\n\r\nclass WeatherPanel extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.callback = this.callback.bind(this);\r\n    }\r\n\r\n    state = { \r\n        chartWidth: '500px',\r\n        chartHeight: '500px',\r\n\r\n        chartType: 'LineChart',\r\n        chartData: [\r\n            ['Time', 'Temperature', 'Wind Speed', 'Humidity'],\r\n            ['0', 0, 0, 0]\r\n        ],\r\n        chartOptions:{\r\n            title: \"Weather\",\r\n            curveType: \"line\",\r\n            legend: { position: \"bottom\" }\r\n        }\r\n     };\r\n    \r\n    callback = (err, body) => {\r\n        this.setState({ chartData: rawToChart(body) });\r\n    };\r\n\r\n    onSubmit = data => {\r\n        historicalRequest(\r\n            parseFloat( data.longitude ),\r\n            parseFloat( data.latitude ),\r\n            \"2018-03-19T00:00:00Z\",\r\n            \"2018-03-19T24:00:00Z\",\r\n            10,\r\n            this.callback\r\n        );\r\n    };\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <GoogleChart \r\n                    width={this.state.chartWidth}\r\n                    height={this.state.chartHeight}\r\n                    type={this.state.chartType}\r\n                    data={this.state.chartData}\r\n                    options={this.state.chartOptions}\r\n                />\r\n                <CoordinatesForm onSubmit={data => this.onSubmit(data)}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default WeatherPanel;","import React, { Component } from 'react';\r\nimport WeatherPanel from './components/weatherPanel.jsx'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <WeatherPanel />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}